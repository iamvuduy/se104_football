{"ast":null,"code":"var _jsxFileName = \"F:\\\\testGemini\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Helper to parse JWT\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parseJwt = token => {\n  try {\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch (e) {\n    return null;\n  }\n};\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    if (token) {\n      const decodedUser = parseJwt(token);\n      // Optional: Add a check to see if token is expired\n      if (decodedUser && decodedUser.exp * 1000 > Date.now()) {\n        setUser(decodedUser);\n        setIsAuthenticated(true);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      } else {\n        // Token is invalid or expired\n        logout();\n      }\n    } else {\n      // Clean up on logout\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('http://localhost:3001/api/auth/login', {\n        username,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (error) {\n      let message = 'Login failed. Please try again.';\n      if (error.response && error.response.data && error.response.data.message) {\n        message = error.response.data.message;\n      }\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 12\n  }, this);\n};\n_s(AuthProvider, \"0GQjlw+7FPnbBH3EYaZKStyQur8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","parseJwt","token","JSON","parse","atob","split","e","AuthContext","AuthProvider","children","_s","setToken","localStorage","getItem","user","setUser","isAuthenticated","setIsAuthenticated","decodedUser","exp","Date","now","defaults","headers","common","logout","login","username","password","response","post","data","setItem","success","error","message","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/testGemini/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Helper to parse JWT\nconst parseJwt = (token) => {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n        return null;\n    }\n};\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [token, setToken] = useState(localStorage.getItem('token'));\n    const [user, setUser] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        if (token) {\n            const decodedUser = parseJwt(token);\n            // Optional: Add a check to see if token is expired\n            if (decodedUser && decodedUser.exp * 1000 > Date.now()) {\n                setUser(decodedUser);\n                setIsAuthenticated(true);\n                axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n            } else {\n                // Token is invalid or expired\n                logout();\n            }\n        } else {\n            // Clean up on logout\n            delete axios.defaults.headers.common['Authorization'];\n        }\n    }, [token]);\n\n    const login = async (username, password) => {\n        try {\n            const response = await axios.post('http://localhost:3001/api/auth/login', { username, password });\n            const { token } = response.data;\n            localStorage.setItem('token', token);\n            setToken(token);\n            return { success: true };\n        } catch (error) {\n            let message = 'Login failed. Please try again.';\n            if (error.response && error.response.data && error.response.data.message) {\n                message = error.response.data.message;\n            }\n            return { success: false, message };\n        }\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n    };\n\n    const value = {\n        isAuthenticated,\n        user,\n        login,\n        logout,\n        token\n    };\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}